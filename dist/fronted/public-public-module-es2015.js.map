{"version":3,"sources":["./src/app/public/components/reset-password/reset-password.component.ts","./src/app/public/components/reset-password/reset-password.component.html","./src/app/public/public-routing.module.ts","./src/app/public/components/register/register.component.ts","./src/app/public/components/register/register.component.html","./src/app/public/public.module.ts","./src/app/public/services/login.service.ts","./src/app/public/components/login/login.component.ts","./src/app/public/components/login/login.component.html","./src/app/public/components/header/header.component.ts","./src/app/public/components/header/header.component.html"],"names":[],"mappings":"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","file":"public-public-module-es2015.js","sourcesContent":["import { ToastrService } from 'ngx-toastr';\nimport { AuthenticationService } from './../../../commons/services/authentication.service';\nimport { LoginService } from './../../services/login.service';\nimport { Router } from '@angular/router';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  resetForm: FormGroup;\n\n  constructor(\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private loginService: LoginService,\n    private toastr: ToastrService,\n  ) { }\n\n  ngOnInit(): void {\n\n    this.resetForm = this.formBuilder.group({\n      correo: ['', [Validators.required, Validators.email]]\n    });\n  }\n\n  get f() {\n    return this.resetForm.controls;\n  }\n\n  onSubmit() {\n\n    // stop here if form is invalid\n    if (this.resetForm.invalid) {\n      return;\n    }\n\n    //Definimos petición y consumimos el ws:\n    this.loginService.resetPassword(this.f.correo.value).subscribe(\n      data => {\n        this.toastr.success(data.mensaje);\n      },\n      error => {\n        this.toastr.error(error);\n      }\n    );\n  }\n\n}\n","<app-header></app-header>\n<div class=\"example-container\">\n\n  <div class=\"width-100\">\n    <h1>Reenvio de contraseña</h1>\n  </div>\n\n  <br />\n\n  <form [formGroup]=\"resetForm\" class=\"example-form\" autocomplete=\"off\">\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Correo electrónico</mat-label>\n      <input matInput placeholder=\"Correo\" formControlName=\"correo\">\n      <mat-error *ngIf=\"f.correo.errors?.required\">Correo es un campo requerido\"</mat-error>\n      <mat-error *ngIf=\"f.correo.errors?.email\">Correo Electrónico inválido\"</mat-error>\n    </mat-form-field>\n\n    <br /><br />\n\n    <button mat-raised-button class=\"width-100\" (click)=\"onSubmit()\" color=\"primary\">Recordar contraseña</button>\n\n  </form>\n</div>","import { ResetPasswordComponent } from './components/reset-password/reset-password.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {LoginComponent} from \"./components/login/login.component\";\nimport {RegisterComponent} from \"./components/register/register.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: LoginComponent\n  },\n  {\n    path: \"register\",\n    component: RegisterComponent\n  },\n  {\n    path: \"reset-password\",\n    component: ResetPasswordComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PublicRoutingModule { }\n","import { ToastrService } from 'ngx-toastr';\nimport {Component, OnInit} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {MustMatch} from \"../../../commons/validators/must-match.validator\";\nimport {LoginService} from \"../../services/login.service\";\nimport {RegistroPeticion} from \"../../../commons/models/registro-peticion.model\";\nimport {AuthenticationService} from \"../../../commons/services/authentication.service\";\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm: FormGroup;\n\n  constructor(\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private loginService: LoginService,\n    private authenticationService: AuthenticationService,\n    private toastr: ToastrService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.registerForm = this.formBuilder.group({\n      nombreCompleto: ['', Validators.required],\n      primerApellido: ['', Validators.required],\n      segundoApellido: ['', Validators.required],\n      correo: ['', [Validators.required, Validators.email]],\n      celular: ['', [Validators.required]],\n      contrasena: ['', [Validators.required, Validators.minLength(6)]],\n      confirmarContrasena: ['', Validators.required]\n    }, {\n      validator: MustMatch('contrasena', 'confirmarContrasena')\n    });\n  }\n\n  get f() {\n    return this.registerForm.controls;\n  }\n\n  onSubmit() {\n\n    // stop here if form is invalid\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    //Definimos petición y consumimos el ws:\n    const peticion = new RegistroPeticion(this.registerForm.value);\n    this.loginService.register(peticion).subscribe(\n      register => {\n        this.authenticationService.login({\n          usuario:peticion.correo, \n          contrasena:peticion.contrasena\n        }).subscribe(\n          login => {\n            this.router.navigate(['/home/proveedor']);\n          },\n          error => {\n            this.toastr.error(error);\n            \n          });\n      },\n      error => {\n        this.toastr.error(error);\n      }\n    );\n  }\n}\n","<app-header></app-header>\n<div class=\"example-container\">\n\n  <div class=\"width-100\">\n    <h1>Registro de comprador</h1>\n  </div>\n\n  <br />\n\n  <form [formGroup]=\"registerForm\" class=\"example-form\" autocomplete=\"off\">\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Nombres</mat-label>\n      <input matInput placeholder=\"Nombres\" formControlName=\"nombreCompleto\" maxlength=\"100\">\n      <mat-error *ngIf=\"f.nombreCompleto.errors?.required\">Nombres es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Primer Apellido</mat-label>\n      <input matInput placeholder=\"Primer Apellido\" formControlName=\"primerApellido\" maxlength=\"50\">\n      <mat-error *ngIf=\"f.primerApellido.errors?.required\">Primer Apellido es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Segundo Apellido</mat-label>\n      <input matInput placeholder=\"Segundo Apellido\" formControlName=\"segundoApellido\" maxlength=\"50\">\n      <mat-error *ngIf=\"f.segundoApellido.errors?.required\">Segundo Apellido es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Celular</mat-label>\n      <input matInput placeholder=\"Celular\" formControlName=\"celular\" maxlength=\"30\">\n      <mat-error *ngIf=\"f.celular.errors?.required\">Celular es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Correo Electrónico</mat-label>\n      <input type=\"email\" matInput placeholder=\"Correo Electrónico\" formControlName=\"correo\" maxlength=\"100\">\n      <mat-error *ngIf=\"f.correo.errors?.required\">Correo Electrónico es un campo requerido\"</mat-error>\n      <mat-error *ngIf=\"f.correo.errors?.email\">Correo Electrónico inválido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Contraseña</mat-label>\n      <input matInput placeholder=\"Contraseña\" formControlName=\"contrasena\" type=\"password\" \n      autocomplete=\"off\" maxlength=\"100\"/>\n      <mat-error *ngIf=\"f.contrasena.errors?.minlength\">La contraseña debe tener al menos 6 caracteres\n      </mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Confirmar Contraseña</mat-label>\n      <input matInput placeholder=\"Confirmar Contraseña\" formControlName=\"confirmarContrasena\" type=\"password\" \n      autocomplete=\"off\" maxlength=\"100\"/>\n      <mat-error *ngIf=\"f.confirmarContrasena.errors?.mustMatch\">Las contraseñas deben coincidir</mat-error>\n    </mat-form-field>\n\n    <br /><br />\n\n    <button mat-raised-button class=\"width-100\" (click)=\"onSubmit()\" color=\"primary\">Registrarme</button>\n\n  </form>\n</div>","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n\nimport {PublicRoutingModule} from './public-routing.module';\nimport {LoginComponent} from './components/login/login.component';\nimport {RegisterComponent} from './components/register/register.component';\nimport {MaterialModule} from \"../material/material.module\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport { HeaderComponent } from './components/header/header.component';\nimport { ResetPasswordComponent } from './components/reset-password/reset-password.component';\n\n\n@NgModule({\n  declarations: [LoginComponent, RegisterComponent, HeaderComponent, ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    PublicRoutingModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule\n  ]\n})\nexport class PublicModule {\n}\n","import {Injectable} from '@angular/core';\nimport {environment} from \"../../../environments/environment\";\nimport {map} from \"rxjs/operators\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Estado} from \"../../commons/models/estado.model\";\nimport {RegistroPeticion} from \"../../commons/models/registro-peticion.model\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  register(peticion: RegistroPeticion) {\n    const url = `${environment.apiPublicUrl}/registro/vendedor`;\n    return this.http.put<Estado>(url, peticion)\n      .pipe(map(estado => {\n        //Si arrojo un estado fallido retornamos error\n        if (!estado || estado.exitoso !== true) {\n          throw new Error(estado.mensaje);\n        }\n        return estado;\n      }));\n  }\n\n  resetPassword(correo:string) {\n    const url = `${environment.apiPublicUrl}/send-password-recovery`;\n    return this.http.post<Estado>(url, {\n      \"correo\":correo\n    })\n      .pipe(map(estado => {\n        //Si arrojo un estado fallido retornamos error\n        if (!estado || estado.exitoso !== true) {\n          throw new Error(estado.mensaje);\n        }\n        return estado;\n      }));\n  }\n}\n","import { ToastrService } from 'ngx-toastr';\nimport { ConstantesUtil } from './../../../commons/helpers/constantes-util';\nimport {Component, OnInit} from '@angular/core';\nimport {Router, ActivatedRoute} from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {first} from 'rxjs/operators';\nimport {AuthenticationService} from \"../../../commons/services/authentication.service\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  hide = true;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authenticationService: AuthenticationService,\n    private toastr: ToastrService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      usuario: ['', Validators.required],\n      contrasena: ['', Validators.required],\n    });\n  }\n\n  goToResetPassword() {\n    this.router.navigate(['/reset-password']);\n  };\n\n  isPerfilVendedor(): Boolean {\n    return this.authenticationService.perfiles.indexOf(ConstantesUtil.PERFIL_PROVEEDOR) !== -1;\n  }\n\n  isPerfilAdministrador(): Boolean {\n    return this.authenticationService.perfiles.indexOf(ConstantesUtil.PERFIL_ADMINISTRADOR) !== -1;\n  }\n\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  onSubmit() {\n    this.authenticationService.login(this.loginForm.value)\n      .pipe(first())\n      .subscribe(\n        data => {\n          if(this.isPerfilVendedor()){\n            this.router.navigate(['/home/proveedor']);\n          }\n          else if(this.isPerfilAdministrador()){\n            this.router.navigate(['/home/administrador']);\n          }\n        },\n        error => {\n          this.toastr.error(error);\n        });\n  }\n}\n","<app-header></app-header>\n<div class=\"example-container\">\n\n  <div class=\"width-100\">\n    <h1>Login</h1>\n  </div>\n\n  <br />\n\n  <form [formGroup]=\"loginForm\" class=\"example-form\" autocomplete=\"off\">\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Correo electrónico</mat-label>\n      <input matInput placeholder=\"Correo electrónico\" formControlName=\"usuario\">\n      <mat-error *ngIf=\"f.usuario.errors?.required\">Correo electrónico es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Contraseña</mat-label>\n      <input matInput placeholder=\"Contraseña\" formControlName=\"contrasena\" [type]=\"hide ? 'password' : 'text'\">\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n      <mat-error *ngIf=\"f.contrasena.errors?.required\">Contraseña es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <div class=\"width-100-r\">\n      <a [routerLink]=\"\" (click)=\"goToResetPassword()\">¿Has olvidado tu contraseña?</a>\n    </div>\n\n\n    <br />\n\n    <button mat-raised-button class=\"width-100\" (click)=\"onSubmit()\" color=\"primary\">Iniciar sesión</button>\n\n  </form>\n</div>","import {Component, OnInit} from '@angular/core';\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss', '../../../app.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor(private router: Router) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  goToLogin() {\n    this.router.navigate(['']);\n  }\n\n  goToRegister() {\n    this.router.navigate(['/register']);\n  };\n\n}\n","<mat-toolbar color=\"primary\">\n  <span>Appgro Web</span>\n  <span class=\"example-spacer\"></span>\n  <button mat-button (click)=\"goToLogin()\">Login</button>\n  <button mat-button (click)=\"goToRegister()\">Registro</button>\n</mat-toolbar>\n"],"sourceRoot":"webpack:///"}