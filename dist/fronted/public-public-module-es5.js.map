{"version":3,"sources":["webpack:///src/app/public/components/reset-password/reset-password.component.ts","webpack:///src/app/public/components/reset-password/reset-password.component.html","webpack:///src/app/public/public-routing.module.ts","webpack:///src/app/public/components/register/register.component.ts","webpack:///src/app/public/components/register/register.component.html","webpack:///src/app/public/public.module.ts","webpack:///src/app/public/services/login.service.ts","webpack:///src/app/public/components/login/login.component.ts","webpack:///src/app/public/components/login/login.component.html","webpack:///src/app/public/components/header/header.component.ts","webpack:///src/app/public/components/header/header.component.html"],"names":["ResetPasswordComponent","router","formBuilder","loginService","toastr","resetForm","group","correo","required","email","controls","invalid","resetPassword","f","value","subscribe","data","success","mensaje","error","onSubmit","routes","path","component","PublicRoutingModule","forChild","RegisterComponent","authenticationService","registerForm","nombreCompleto","primerApellido","segundoApellido","celular","contrasena","minLength","confirmarContrasena","validator","peticion","register","login","usuario","navigate","PublicModule","LoginService","http","url","apiPublicUrl","put","pipe","estado","exitoso","Error","post","LoginComponent","hide","loginForm","perfiles","indexOf","PERFIL_PROVEEDOR","PERFIL_ADMINISTRADOR","isPerfilVendedor","isPerfilAdministrador","goToResetPassword","HeaderComponent","goToLogin","goToRegister"],"mappings":";;;;;;;;;;;;;;;;;;;;AAIA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACUM;;AAA6C;;AAA6B;;;;;;AAC1E;;AAA0C;;AAA4B;;;;UDH/DA,sB;AAIX,wCACUC,MADV,EAEUC,WAFV,EAGUC,YAHV,EAIUC,MAJV,EAI+B;AAAA;;AAHrB,eAAAH,MAAA,GAAAA,MAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAC,YAAA,GAAAA,YAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACL;;;;iBAEL,oBAAQ;AAEN,iBAAKC,SAAL,GAAiB,KAAKH,WAAL,CAAiBI,KAAjB,CAAuB;AACtCC,oBAAM,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWC,KAAjC,CAAL;AAD8B,aAAvB,CAAjB;AAGD;;;eAED,eAAQ;AACN,mBAAO,KAAKJ,SAAL,CAAeK,QAAtB;AACD;;;iBAED,oBAAW;AAAA;;AAET;AACA,gBAAI,KAAKL,SAAL,CAAeM,OAAnB,EAA4B;AAC1B;AACD,aALQ,CAOT;;;AACA,iBAAKR,YAAL,CAAkBS,aAAlB,CAAgC,KAAKC,CAAL,CAAON,MAAP,CAAcO,KAA9C,EAAqDC,SAArD,CACE,UAAAC,IAAI,EAAI;AACN,mBAAI,CAACZ,MAAL,CAAYa,OAAZ,CAAoBD,IAAI,CAACE,OAAzB;AACD,aAHH,EAIE,UAAAC,KAAK,EAAI;AACP,mBAAI,CAACf,MAAL,CAAYe,KAAZ,CAAkBA,KAAlB;AACD,aANH;AAQD;;;;;;;yBAtCUnB,sB,EAAsB,uH,EAAA,2H,EAAA,qI,EAAA,yH;AAAA,O;;;cAAtBA,sB;AAAsB,2C;AAAA,iB;AAAA,e;AAAA,gU;AAAA;AAAA;ACZnC;;AACA;;AAEE;;AACE;;AAAI;;AAAqB;;AAC3B;;AAEA;;AAEA;;AAEE;;AACE;;AAAW;;AAAkB;;AAC7B;;AACA;;AACA;;AACF;;AAEA;;AAAM;;AAEN;;AAA4C;AAAA,qBAAS,IAAAoB,QAAA,EAAT;AAAmB,aAAnB;;AAAqC;;AAAmB;;AAEtG;;AACF;;;;AAdQ;;AAAA;;AAKU;;AAAA;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;ACflB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,UAAMC,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,EAKrB;AACED,YAAI,EAAE,UADR;AAEEC,iBAAS,EAAE;AAFb,OALqB,EASrB;AACED,YAAI,EAAE,gBADR;AAEEC,iBAAS,EAAE;AAFb,OATqB,CAAvB;;UAmBaC,mB;;;;;yBAAAA,mB;AAAmB,O;;;cAAnBA;;;kBAHF,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,C,EACC,4D;;;;4HAECG,mB,EAAmB;AAAA;AAAA,oBAFpB,4DAEoB;AAAA,S;AAFR,O;;;;;;;;;;;;;;;;;ACpBxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACWM;;AAAqD;;AAA8B;;;;;;AAQnF;;AAAqD;;AAAsC;;;;;;AAQ3F;;AAAsD;;AAAuC;;;;;;AAQ7F;;AAA8C;;AAA8B;;;;;;AAQ5E;;AAA6C;;AAAyC;;;;;;AACtF;;AAA0C;;AAA4B;;;;;;AAStE;;AAAkD;;AAClD;;;;;;AASA;;AAA2D;;AAA+B;;;;UDpDnFE,iB;AAIX,mCACUzB,MADV,EAEUC,WAFV,EAGUC,YAHV,EAIUwB,qBAJV,EAKUvB,MALV,EAK+B;AAAA;;AAJrB,eAAAH,MAAA,GAAAA,MAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAC,YAAA,GAAAA,YAAA;AACA,eAAAwB,qBAAA,GAAAA,qBAAA;AACA,eAAAvB,MAAA,GAAAA,MAAA;AAET;;;;iBAED,oBAAQ;AACN,iBAAKwB,YAAL,GAAoB,KAAK1B,WAAL,CAAiBI,KAAjB,CAAuB;AACzCuB,4BAAc,EAAE,CAAC,EAAD,EAAK,0DAAWrB,QAAhB,CADyB;AAEzCsB,4BAAc,EAAE,CAAC,EAAD,EAAK,0DAAWtB,QAAhB,CAFyB;AAGzCuB,6BAAe,EAAE,CAAC,EAAD,EAAK,0DAAWvB,QAAhB,CAHwB;AAIzCD,oBAAM,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWC,KAAjC,CAAL,CAJiC;AAKzCuB,qBAAO,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWxB,QAAZ,CAAL,CALgC;AAMzCyB,wBAAU,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWzB,QAAZ,EAAsB,0DAAW0B,SAAX,CAAqB,CAArB,CAAtB,CAAL,CAN6B;AAOzCC,iCAAmB,EAAE,CAAC,EAAD,EAAK,0DAAW3B,QAAhB;AAPoB,aAAvB,EAQjB;AACD4B,uBAAS,EAAE,2FAAU,YAAV,EAAwB,qBAAxB;AADV,aARiB,CAApB;AAWD;;;eAED,eAAQ;AACN,mBAAO,KAAKR,YAAL,CAAkBlB,QAAzB;AACD;;;iBAED,oBAAW;AAAA;;AAET;AACA,gBAAI,KAAKkB,YAAL,CAAkBjB,OAAtB,EAA+B;AAC7B;AACD,aALQ,CAOT;;;AACA,gBAAM0B,QAAQ,GAAG,IAAI,wFAAJ,CAAqB,KAAKT,YAAL,CAAkBd,KAAvC,CAAjB;AACA,iBAAKX,YAAL,CAAkBmC,QAAlB,CAA2BD,QAA3B,EAAqCtB,SAArC,CACE,UAAAuB,QAAQ,EAAI;AACV,oBAAI,CAACX,qBAAL,CAA2BY,KAA3B,CAAiC;AAC/BC,uBAAO,EAACH,QAAQ,CAAC9B,MADc;AAE/B0B,0BAAU,EAACI,QAAQ,CAACJ;AAFW,eAAjC,EAGGlB,SAHH,CAIE,UAAAwB,KAAK,EAAI;AACP,sBAAI,CAACtC,MAAL,CAAYwC,QAAZ,CAAqB,CAAC,iBAAD,CAArB;AACD,eANH,EAOE,UAAAtB,KAAK,EAAI;AACP,sBAAI,CAACf,MAAL,CAAYe,KAAZ,CAAkBA,KAAlB;AAED,eAVH;AAWD,aAbH,EAcE,UAAAA,KAAK,EAAI;AACP,oBAAI,CAACf,MAAL,CAAYe,KAAZ,CAAkBA,KAAlB;AACD,aAhBH;AAkBD;;;;;;;yBA1DUO,iB,EAAiB,uH,EAAA,2H,EAAA,qI,EAAA,+J,EAAA,yH;AAAA,O;;;cAAjBA,iB;AAAiB,qC;AAAA,iB;AAAA,e;AAAA,ukC;AAAA;AAAA;ACd9B;;AACA;;AAEE;;AACE;;AAAI;;AAAqB;;AAC3B;;AAEA;;AAEA;;AAEE;;AACE;;AAAW;;AAAO;;AAClB;;AACA;;AACF;;AAEA;;AAEA;;AACE;;AAAW;;AAAe;;AAC1B;;AACA;;AACF;;AAEA;;AAEA;;AACE;;AAAW;;AAAgB;;AAC3B;;AACA;;AACF;;AAEA;;AAEA;;AACE;;AAAW;;AAAO;;AAClB;;AACA;;AACF;;AAEA;;AAEA;;AACE;;AAAW;;AAAkB;;AAC7B;;AACA;;AACA;;AACF;;AAEA;;AAEA;;AACE;;AAAW;;AAAU;;AACrB;;AAEA;;AAEF;;AAEA;;AAEA;;AACE;;AAAW;;AAAoB;;AAC/B;;AAEA;;AACF;;AAEA;;AAAM;;AAEN;;AAA4C;AAAA,qBAAS,IAAAN,QAAA,EAAT;AAAmB,aAAnB;;AAAqC;;AAAW;;AAE9F;;AACF;;;;AAjEQ;;AAAA;;AAKU;;AAAA;;AAQA;;AAAA;;AAQA;;AAAA;;AAQA;;AAAA;;AAQA;;AAAA;;AACA;;AAAA;;AASA;;AAAA;;AAUA;;AAAA;;;;;;;;;;;;;;;;;;;;;ACjElB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAsBasB,Y;;;;;yBAAAA,Y;AAAY,O;;;cAAZA;;;kBARF,CACP,4DADO,EAEP,0EAFO,EAGP,wEAHO,EAIP,0DAJO,EAKP,kEALO,C;;;;4HAQEA,Y,EAAY;AAAA,yBATR,gFASQ,EATQ,yFASR,EAT2B,mFAS3B,EAT4C,0GAS5C;AATkE,oBAEvF,4DAFuF,EAGvF,0EAHuF,EAIvF,wEAJuF,EAKvF,0DALuF,EAMvF,kEANuF;AASlE,S;AAHF,O;;;;;;;;;;;;;;;;;ACnBvB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UASaC,Y;AAEX,8BAAoBC,IAApB,EAAsC;AAAA;;AAAlB,eAAAA,IAAA,GAAAA,IAAA;AACnB;;;;iBAED,kBAASP,QAAT,EAAqC;AACnC,gBAAMQ,GAAG,aAAM,sEAAYC,YAAlB,uBAAT;AACA,mBAAO,KAAKF,IAAL,CAAUG,GAAV,CAAsBF,GAAtB,EAA2BR,QAA3B,EACJW,IADI,CACC,2DAAI,UAAAC,MAAM,EAAI;AAClB;AACA,kBAAI,CAACA,MAAD,IAAWA,MAAM,CAACC,OAAP,KAAmB,IAAlC,EAAwC;AACtC,sBAAM,IAAIC,KAAJ,CAAUF,MAAM,CAAC/B,OAAjB,CAAN;AACD;;AACD,qBAAO+B,MAAP;AACD,aANK,CADD,CAAP;AAQD;;;iBAED,uBAAc1C,MAAd,EAA6B;AAC3B,gBAAMsC,GAAG,aAAM,sEAAYC,YAAlB,4BAAT;AACA,mBAAO,KAAKF,IAAL,CAAUQ,IAAV,CAAuBP,GAAvB,EAA4B;AACjC,wBAAStC;AADwB,aAA5B,EAGJyC,IAHI,CAGC,2DAAI,UAAAC,MAAM,EAAI;AAClB;AACA,kBAAI,CAACA,MAAD,IAAWA,MAAM,CAACC,OAAP,KAAmB,IAAlC,EAAwC;AACtC,sBAAM,IAAIC,KAAJ,CAAUF,MAAM,CAAC/B,OAAjB,CAAN;AACD;;AACD,qBAAO+B,MAAP;AACD,aANK,CAHD,CAAP;AAUD;;;;;;;yBA7BUN,Y,EAAY,uH;AAAA,O;;;eAAZA,Y;AAAY,iBAAZA,YAAY,K;AAAA,oBAFX;;;;;;;;;;;;;;;;;ACPd;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACaM;;AAA8C;;AAAyC;;;;;;AASvF;;AAAiD;;AAAiC;;;;UDV3EU,c;AAKX,gCACUnD,WADV,EAEUD,MAFV,EAGU0B,qBAHV,EAIUvB,MAJV,EAI+B;AAAA;;AAHrB,eAAAF,WAAA,GAAAA,WAAA;AACA,eAAAD,MAAA,GAAAA,MAAA;AACA,eAAA0B,qBAAA,GAAAA,qBAAA;AACA,eAAAvB,MAAA,GAAAA,MAAA;AANV,eAAAkD,IAAA,GAAO,IAAP;AAQC;;;;iBAED,oBAAQ;AACN,iBAAKC,SAAL,GAAiB,KAAKrD,WAAL,CAAiBI,KAAjB,CAAuB;AACtCkC,qBAAO,EAAE,CAAC,EAAD,EAAK,0DAAWhC,QAAhB,CAD6B;AAEtCyB,wBAAU,EAAE,CAAC,EAAD,EAAK,0DAAWzB,QAAhB;AAF0B,aAAvB,CAAjB;AAID;;;iBAED,6BAAoB;AAClB,iBAAKP,MAAL,CAAYwC,QAAZ,CAAqB,CAAC,iBAAD,CAArB;AACD;;;iBAED,4BAAgB;AACd,mBAAO,KAAKd,qBAAL,CAA2B6B,QAA3B,CAAoCC,OAApC,CAA4C,gFAAeC,gBAA3D,MAAiF,CAAC,CAAzF;AACD;;;iBAED,iCAAqB;AACnB,mBAAO,KAAK/B,qBAAL,CAA2B6B,QAA3B,CAAoCC,OAApC,CAA4C,gFAAeE,oBAA3D,MAAqF,CAAC,CAA7F;AACD;;;eAED,eAAQ;AACN,mBAAO,KAAKJ,SAAL,CAAe7C,QAAtB;AACD;;;iBAED,oBAAW;AAAA;;AACT,iBAAKiB,qBAAL,CAA2BY,KAA3B,CAAiC,KAAKgB,SAAL,CAAezC,KAAhD,EACGkC,IADH,CACQ,8DADR,EAEGjC,SAFH,CAGI,UAAAC,IAAI,EAAI;AACN,kBAAG,MAAI,CAAC4C,gBAAL,EAAH,EAA2B;AACzB,sBAAI,CAAC3D,MAAL,CAAYwC,QAAZ,CAAqB,CAAC,iBAAD,CAArB;AACD,eAFD,MAGK,IAAG,MAAI,CAACoB,qBAAL,EAAH,EAAgC;AACnC,sBAAI,CAAC5D,MAAL,CAAYwC,QAAZ,CAAqB,CAAC,qBAAD,CAArB;AACD;AACF,aAVL,EAWI,UAAAtB,KAAK,EAAI;AACP,oBAAI,CAACf,MAAL,CAAYe,KAAZ,CAAkBA,KAAlB;AACD,aAbL;AAcD;;;;;;;yBAnDUkC,c,EAAc,2H,EAAA,uH,EAAA,+J,EAAA,yH;AAAA,O;;;cAAdA,c;AAAc,kC;AAAA,iB;AAAA,e;AAAA,6f;AAAA;AAAA;ACb3B;;AACA;;AAEE;;AACE;;AAAI;;AAAK;;AACX;;AAEA;;AAEA;;AAEE;;AACE;;AAAW;;AAAkB;;AAC7B;;AACA;;AACF;;AAEA;;AAEA;;AACE;;AAAW;;AAAU;;AACrB;;AACA;;AAAoB;AAAA;AAAA;;AAAuB;;AAA0C;;AACrF;;AACF;;AAEA;;AAEA;;AACE;;AAAmB;AAAA,qBAAS,IAAAS,iBAAA,EAAT;AAA4B,aAA5B;;AAA8B;;AAA4B;;AAC/E;;AAGA;;AAEA;;AAA4C;AAAA,qBAAS,IAAA1C,QAAA,EAAT;AAAmB,aAAnB;;AAAqC;;AAAc;;AAEjG;;AACF;;;;AA7BQ;;AAAA;;AAKU;;AAAA;;AAO0D;;AAAA;;AAC3B;;AAAA;;AAC/B;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCfL2C,e;AAEX,iCAAoB9D,MAApB,EAAoC;AAAA;;AAAhB,eAAAA,MAAA,GAAAA,MAAA;AACnB;;;;iBAED,oBAAQ,CACP;;;iBAED,qBAAY;AACV,iBAAKA,MAAL,CAAYwC,QAAZ,CAAqB,CAAC,EAAD,CAArB;AACD;;;iBAED,wBAAe;AACb,iBAAKxC,MAAL,CAAYwC,QAAZ,CAAqB,CAAC,WAAD,CAArB;AACD;;;;;;;yBAdUsB,e,EAAe,uH;AAAA,O;;;cAAfA,e;AAAe,mC;AAAA,gB;AAAA,e;AAAA,6F;AAAA;AAAA;ACR5B;;AACE;;AAAM;;AAAU;;AAChB;;AACA;;AAAmB;AAAA,qBAAS,IAAAC,SAAA,EAAT;AAAoB,aAApB;;AAAsB;;AAAK;;AAC9C;;AAAmB;AAAA,qBAAS,IAAAC,YAAA,EAAT;AAAuB,aAAvB;;AAAyB;;AAAQ;;AACtD","file":"public-public-module-es5.js","sourcesContent":["import { ToastrService } from 'ngx-toastr';\nimport { AuthenticationService } from './../../../commons/services/authentication.service';\nimport { LoginService } from './../../services/login.service';\nimport { Router } from '@angular/router';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  resetForm: FormGroup;\n\n  constructor(\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private loginService: LoginService,\n    private toastr: ToastrService,\n  ) { }\n\n  ngOnInit(): void {\n\n    this.resetForm = this.formBuilder.group({\n      correo: ['', [Validators.required, Validators.email]]\n    });\n  }\n\n  get f() {\n    return this.resetForm.controls;\n  }\n\n  onSubmit() {\n\n    // stop here if form is invalid\n    if (this.resetForm.invalid) {\n      return;\n    }\n\n    //Definimos petición y consumimos el ws:\n    this.loginService.resetPassword(this.f.correo.value).subscribe(\n      data => {\n        this.toastr.success(data.mensaje);\n      },\n      error => {\n        this.toastr.error(error);\n      }\n    );\n  }\n\n}\n","<app-header></app-header>\n<div class=\"example-container\">\n\n  <div class=\"width-100\">\n    <h1>Reenvio de contraseña</h1>\n  </div>\n\n  <br />\n\n  <form [formGroup]=\"resetForm\" class=\"example-form\" autocomplete=\"off\">\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Correo electrónico</mat-label>\n      <input matInput placeholder=\"Correo\" formControlName=\"correo\">\n      <mat-error *ngIf=\"f.correo.errors?.required\">Correo es un campo requerido\"</mat-error>\n      <mat-error *ngIf=\"f.correo.errors?.email\">Correo Electrónico inválido\"</mat-error>\n    </mat-form-field>\n\n    <br /><br />\n\n    <button mat-raised-button class=\"width-100\" (click)=\"onSubmit()\" color=\"primary\">Recordar contraseña</button>\n\n  </form>\n</div>","import { ResetPasswordComponent } from './components/reset-password/reset-password.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {LoginComponent} from \"./components/login/login.component\";\nimport {RegisterComponent} from \"./components/register/register.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: LoginComponent\n  },\n  {\n    path: \"register\",\n    component: RegisterComponent\n  },\n  {\n    path: \"reset-password\",\n    component: ResetPasswordComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PublicRoutingModule { }\n","import { ToastrService } from 'ngx-toastr';\nimport {Component, OnInit} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {MustMatch} from \"../../../commons/validators/must-match.validator\";\nimport {LoginService} from \"../../services/login.service\";\nimport {RegistroPeticion} from \"../../../commons/models/registro-peticion.model\";\nimport {AuthenticationService} from \"../../../commons/services/authentication.service\";\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm: FormGroup;\n\n  constructor(\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private loginService: LoginService,\n    private authenticationService: AuthenticationService,\n    private toastr: ToastrService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.registerForm = this.formBuilder.group({\n      nombreCompleto: ['', Validators.required],\n      primerApellido: ['', Validators.required],\n      segundoApellido: ['', Validators.required],\n      correo: ['', [Validators.required, Validators.email]],\n      celular: ['', [Validators.required]],\n      contrasena: ['', [Validators.required, Validators.minLength(6)]],\n      confirmarContrasena: ['', Validators.required]\n    }, {\n      validator: MustMatch('contrasena', 'confirmarContrasena')\n    });\n  }\n\n  get f() {\n    return this.registerForm.controls;\n  }\n\n  onSubmit() {\n\n    // stop here if form is invalid\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    //Definimos petición y consumimos el ws:\n    const peticion = new RegistroPeticion(this.registerForm.value);\n    this.loginService.register(peticion).subscribe(\n      register => {\n        this.authenticationService.login({\n          usuario:peticion.correo, \n          contrasena:peticion.contrasena\n        }).subscribe(\n          login => {\n            this.router.navigate(['/home/proveedor']);\n          },\n          error => {\n            this.toastr.error(error);\n            \n          });\n      },\n      error => {\n        this.toastr.error(error);\n      }\n    );\n  }\n}\n","<app-header></app-header>\n<div class=\"example-container\">\n\n  <div class=\"width-100\">\n    <h1>Registro de comprador</h1>\n  </div>\n\n  <br />\n\n  <form [formGroup]=\"registerForm\" class=\"example-form\" autocomplete=\"off\">\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Nombres</mat-label>\n      <input matInput placeholder=\"Nombres\" formControlName=\"nombreCompleto\" maxlength=\"100\">\n      <mat-error *ngIf=\"f.nombreCompleto.errors?.required\">Nombres es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Primer Apellido</mat-label>\n      <input matInput placeholder=\"Primer Apellido\" formControlName=\"primerApellido\" maxlength=\"50\">\n      <mat-error *ngIf=\"f.primerApellido.errors?.required\">Primer Apellido es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Segundo Apellido</mat-label>\n      <input matInput placeholder=\"Segundo Apellido\" formControlName=\"segundoApellido\" maxlength=\"50\">\n      <mat-error *ngIf=\"f.segundoApellido.errors?.required\">Segundo Apellido es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Celular</mat-label>\n      <input matInput placeholder=\"Celular\" formControlName=\"celular\" maxlength=\"30\">\n      <mat-error *ngIf=\"f.celular.errors?.required\">Celular es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Correo Electrónico</mat-label>\n      <input type=\"email\" matInput placeholder=\"Correo Electrónico\" formControlName=\"correo\" maxlength=\"100\">\n      <mat-error *ngIf=\"f.correo.errors?.required\">Correo Electrónico es un campo requerido\"</mat-error>\n      <mat-error *ngIf=\"f.correo.errors?.email\">Correo Electrónico inválido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Contraseña</mat-label>\n      <input matInput placeholder=\"Contraseña\" formControlName=\"contrasena\" type=\"password\" \n      autocomplete=\"off\" maxlength=\"100\"/>\n      <mat-error *ngIf=\"f.contrasena.errors?.minlength\">La contraseña debe tener al menos 6 caracteres\n      </mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Confirmar Contraseña</mat-label>\n      <input matInput placeholder=\"Confirmar Contraseña\" formControlName=\"confirmarContrasena\" type=\"password\" \n      autocomplete=\"off\" maxlength=\"100\"/>\n      <mat-error *ngIf=\"f.confirmarContrasena.errors?.mustMatch\">Las contraseñas deben coincidir</mat-error>\n    </mat-form-field>\n\n    <br /><br />\n\n    <button mat-raised-button class=\"width-100\" (click)=\"onSubmit()\" color=\"primary\">Registrarme</button>\n\n  </form>\n</div>","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n\nimport {PublicRoutingModule} from './public-routing.module';\nimport {LoginComponent} from './components/login/login.component';\nimport {RegisterComponent} from './components/register/register.component';\nimport {MaterialModule} from \"../material/material.module\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport { HeaderComponent } from './components/header/header.component';\nimport { ResetPasswordComponent } from './components/reset-password/reset-password.component';\n\n\n@NgModule({\n  declarations: [LoginComponent, RegisterComponent, HeaderComponent, ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    PublicRoutingModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule\n  ]\n})\nexport class PublicModule {\n}\n","import {Injectable} from '@angular/core';\nimport {environment} from \"../../../environments/environment\";\nimport {map} from \"rxjs/operators\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Estado} from \"../../commons/models/estado.model\";\nimport {RegistroPeticion} from \"../../commons/models/registro-peticion.model\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  register(peticion: RegistroPeticion) {\n    const url = `${environment.apiPublicUrl}/registro/vendedor`;\n    return this.http.put<Estado>(url, peticion)\n      .pipe(map(estado => {\n        //Si arrojo un estado fallido retornamos error\n        if (!estado || estado.exitoso !== true) {\n          throw new Error(estado.mensaje);\n        }\n        return estado;\n      }));\n  }\n\n  resetPassword(correo:string) {\n    const url = `${environment.apiPublicUrl}/send-password-recovery`;\n    return this.http.post<Estado>(url, {\n      \"correo\":correo\n    })\n      .pipe(map(estado => {\n        //Si arrojo un estado fallido retornamos error\n        if (!estado || estado.exitoso !== true) {\n          throw new Error(estado.mensaje);\n        }\n        return estado;\n      }));\n  }\n}\n","import { ToastrService } from 'ngx-toastr';\nimport { ConstantesUtil } from './../../../commons/helpers/constantes-util';\nimport {Component, OnInit} from '@angular/core';\nimport {Router, ActivatedRoute} from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {first} from 'rxjs/operators';\nimport {AuthenticationService} from \"../../../commons/services/authentication.service\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  hide = true;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authenticationService: AuthenticationService,\n    private toastr: ToastrService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      usuario: ['', Validators.required],\n      contrasena: ['', Validators.required],\n    });\n  }\n\n  goToResetPassword() {\n    this.router.navigate(['/reset-password']);\n  };\n\n  isPerfilVendedor(): Boolean {\n    return this.authenticationService.perfiles.indexOf(ConstantesUtil.PERFIL_PROVEEDOR) !== -1;\n  }\n\n  isPerfilAdministrador(): Boolean {\n    return this.authenticationService.perfiles.indexOf(ConstantesUtil.PERFIL_ADMINISTRADOR) !== -1;\n  }\n\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  onSubmit() {\n    this.authenticationService.login(this.loginForm.value)\n      .pipe(first())\n      .subscribe(\n        data => {\n          if(this.isPerfilVendedor()){\n            this.router.navigate(['/home/proveedor']);\n          }\n          else if(this.isPerfilAdministrador()){\n            this.router.navigate(['/home/administrador']);\n          }\n        },\n        error => {\n          this.toastr.error(error);\n        });\n  }\n}\n","<app-header></app-header>\n<div class=\"example-container\">\n\n  <div class=\"width-100\">\n    <h1>Login</h1>\n  </div>\n\n  <br />\n\n  <form [formGroup]=\"loginForm\" class=\"example-form\" autocomplete=\"off\">\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Correo electrónico</mat-label>\n      <input matInput placeholder=\"Correo electrónico\" formControlName=\"usuario\">\n      <mat-error *ngIf=\"f.usuario.errors?.required\">Correo electrónico es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Contraseña</mat-label>\n      <input matInput placeholder=\"Contraseña\" formControlName=\"contrasena\" [type]=\"hide ? 'password' : 'text'\">\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n      <mat-error *ngIf=\"f.contrasena.errors?.required\">Contraseña es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <div class=\"width-100-r\">\n      <a [routerLink]=\"\" (click)=\"goToResetPassword()\">¿Has olvidado tu contraseña?</a>\n    </div>\n\n\n    <br />\n\n    <button mat-raised-button class=\"width-100\" (click)=\"onSubmit()\" color=\"primary\">Iniciar sesión</button>\n\n  </form>\n</div>","import {Component, OnInit} from '@angular/core';\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss', '../../../app.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor(private router: Router) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  goToLogin() {\n    this.router.navigate(['']);\n  }\n\n  goToRegister() {\n    this.router.navigate(['/register']);\n  };\n\n}\n","<mat-toolbar color=\"primary\">\n  <span>Appgro Web</span>\n  <span class=\"example-spacer\"></span>\n  <button mat-button (click)=\"goToLogin()\">Login</button>\n  <button mat-button (click)=\"goToRegister()\">Registro</button>\n</mat-toolbar>\n"]}