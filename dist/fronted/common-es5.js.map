{"version":3,"sources":["webpack:///src/app/commons/models/registro-peticion.model.ts","webpack:///src/app/commons/services/parametrizacion.service.ts","webpack:///src/app/commons/validators/required-match.validator.ts","webpack:///src/app/commons/validators/must-match.validator.ts","webpack:///src/app/commons/helpers/auth.guard.ts","webpack:///src/app/commons/helpers/auth.guard-prv.ts","webpack:///src/app/commons/helpers/auth.guard-adm.ts"],"names":["RegistroPeticion","init","Object","assign","ParametrizacionService","http","idPais","url","apiParametrizacionUrl","get","pipe","entidad","estado","exitoso","Error","mensaje","idDepartamento","apiCategoriaUrl","data","apiEtiquetaUrl","apiProveedorUrl","etiqueta","id","put","nombre","categoria","peticion","post","tarifas","idEtiqueta","idCategoria","RequiredMatch","control","selection","value","incorrect","MustMatch","controlName","matchingControlName","formGroup","controls","matchingControl","errors","mustMatch","setErrors","AuthGuard","router","authenticationService","route","state","currentUser","currentUserValue","navigate","queryParams","returnUrl","AuthGuardPrv","perfiles","indexOf","PERFIL_PROVEEDOR","AuthGuardAdm","PERFIL_ADMINISTRADOR"],"mappings":"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","file":"common-es5.js","sourcesContent":["export class RegistroPeticion {\n  nombreCompleto: string;\n  primerApellido: string;\n  segundoApellido: string;\n  correo: string;\n  celular: string;\n  contrasena: string;\n\n  public constructor(init?: Partial<RegistroPeticion>) {\n    Object.assign(this, init);\n  }\n}\n","import { Estado } from './../models/estado.model';\nimport { TarifaModel } from './../models/tarifa.model';\nimport { EtiquetaModel } from './../models/etiqueta.model';\nimport { CategoriaModel } from './../models/categoria.model';\nimport { NombreIdModel } from './../models/nombre-id.model';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { Entidad } from '../models/entidad.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ParametrizacionService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  obtenerDepartamentos(idPais: number): Observable<NombreIdModel[]> {\n    const url = `${environment.apiParametrizacionUrl}/obtenerDepartamentosPorPais/${idPais}`;\n    return this.http.get<Entidad<NombreIdModel[]>>(url)\n      .pipe(map(entidad => {\n        //Si arrojo un estado fallido retornamos error\n        if (!entidad || !entidad.estado || entidad.estado.exitoso !== true) {\n          throw new Error(entidad.estado.mensaje);\n        }\n        return entidad.entidad;\n      }));\n  }\n\n  obtenerCiudades(idDepartamento: number): Observable<NombreIdModel[]> {\n    const url = `${environment.apiParametrizacionUrl}/obtenerCiudadesPorDepartamento/${idDepartamento}`;\n    return this.http.get<Entidad<NombreIdModel[]>>(url)\n      .pipe(map(entidad => {\n        //Si arrojo un estado fallido retornamos error\n        if (!entidad || !entidad.estado || entidad.estado.exitoso !== true) {\n          throw new Error(entidad.estado.mensaje);\n        }\n        return entidad.entidad;\n      }));\n  }\n\n  obtenerCategorias(): Observable<CategoriaModel[]> {\n    const url = `${environment.apiCategoriaUrl}/obtenerCategorias`;\n    return this.http.get<Entidad<CategoriaModel[]>>(url)\n      .pipe(map(data => {\n        //Si arrojo un estado fallido retornamos error\n        if (!data || !data.estado || data.estado.exitoso !== true) {\n          throw new Error(data.estado.mensaje);\n        }\n        return data.entidad;\n      }));\n  }\n\n  obtenerEtiquetas(): Observable<EtiquetaModel[]> {\n    const url = `${environment.apiEtiquetaUrl}/obtenerEtiquetas`;\n    return this.http.get<Entidad<EtiquetaModel[]>>(url)\n      .pipe(map(data => {\n        //Si arrojo un estado fallido retornamos error\n        if (!data || !data.estado || data.estado.exitoso !== true) {\n          throw new Error(data.estado.mensaje);\n        }\n        return data.entidad;\n      }));\n  }\n\n  obtenerTarifas(): Observable<TarifaModel[]> {\n    const url = `${environment.apiProveedorUrl}/obtenerTarifas`;\n    return this.http.get<Entidad<TarifaModel[]>>(url)\n      .pipe(map(data => {\n        //Si arrojo un estado fallido retornamos error\n        if (!data || !data.estado || data.estado.exitoso !== true) {\n          throw new Error(data.estado.mensaje);\n        }\n        return data.entidad;\n      }));\n  }\n\n  guardarEtiqueta(etiqueta: string, id: Number): Observable<Estado> {\n    const url = `${environment.apiEtiquetaUrl}/guardar`;\n    return this.http.put<Estado>(url, {id:id, nombre:etiqueta})\n      .pipe(map(data => {\n        //Si arrojo un estado fallido retornamos error\n        if (!data || data.exitoso !== true) {\n          throw new Error(data.mensaje);\n        }\n        return data;\n      }));\n  }\n\n  guardarCategoria(categoria : CategoriaModel): Observable<Estado> {\n    const url = `${environment.apiCategoriaUrl}/guardar`;\n    return this.http.put<Estado>(url, categoria)\n      .pipe(map(data => {\n       //Si arrojo un estado fallido retornamos error\n       if (!data || data.exitoso !== true) {\n        throw new Error(data.mensaje);\n      }\n      return data;\n      }));\n  }\n\n  guardarTarifas(peticion: TarifaModel[]): Observable<Estado> {\n    const url = `${environment.apiProveedorUrl}/guardarTarifas`;\n    return this.http.post<Estado>(url, {tarifas:peticion})\n      .pipe(map(data => {\n        //Si arrojo un estado fallido retornamos error\n        if (!data || data.exitoso !== true) {\n          throw new Error(data.mensaje);\n        }\n        return data;\n      }));\n  }\n\n  eliminarEtiqueta(idEtiqueta: Number): Observable<Estado> {\n    const url = `${environment.apiEtiquetaUrl}/eliminar/${idEtiqueta}`;\n    return this.http.delete<Estado>(url)\n      .pipe(map(data => {\n        //Si arrojo un estado fallido retornamos error\n        if (!data || data.exitoso !== true) {\n          throw new Error(data.mensaje);\n        }\n        return data;\n      }));\n  }\n\n  eliminarCategoria(idCategoria: Number): Observable<Estado> {\n    const url = `${environment.apiCategoriaUrl}/eliminar/${idCategoria}`;\n    return this.http.delete<Estado>(url)\n      .pipe(map(data => {\n        //Si arrojo un estado fallido retornamos error\n        if (!data || data.exitoso !== true) {\n          throw new Error(data.mensaje);\n        }\n        return data;\n      }));\n  }\n}\n","import { AbstractControl } from '@angular/forms';\n\nexport function RequiredMatch(control: AbstractControl) {\n    const selection: any = control.value;\n    if (typeof selection === 'string') {\n        return { incorrect: true };\n    }\n    return null;\n}","import { FormGroup } from '@angular/forms';\n\n// custom validator to check that two fields match\nexport function MustMatch(controlName: string, matchingControlName: string) {\n  return (formGroup: FormGroup) => {\n    const control = formGroup.controls[controlName];\n    const matchingControl = formGroup.controls[matchingControlName];\n\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n      // return if another validator has already found an error on the matchingControl\n      return;\n    }\n\n    // set error on matchingControl if validation fails\n    if (control.value !== matchingControl.value) {\n      matchingControl.setErrors({ mustMatch: true });\n    } else {\n      matchingControl.setErrors(null);\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot} from '@angular/router';\n\nimport {AuthenticationService} from '../services/authentication.service';\n\n@Injectable({providedIn: 'root'})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private authenticationService: AuthenticationService\n  ) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const currentUser = this.authenticationService.currentUserValue;\n    if (currentUser) {\n      return true;\n    }\n\n    // not logged in so redirect to login page with the return url\n    this.router.navigate(['/home'], {queryParams: {returnUrl: state.url}});\n    return false;\n  }\n}\n","import { ConstantesUtil } from './constantes-util';\nimport {Injectable} from '@angular/core';\nimport {Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot} from '@angular/router';\n\nimport {AuthenticationService} from '../services/authentication.service';\n\n@Injectable({providedIn: 'root'})\nexport class AuthGuardPrv implements CanActivate {\n  constructor(\n    private router: Router,\n    private authenticationService: AuthenticationService\n  ) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const currentUser = this.authenticationService.currentUserValue;\n    const perfiles = this.authenticationService.perfiles;\n    if (currentUser && perfiles && perfiles.indexOf(ConstantesUtil.PERFIL_PROVEEDOR) !== -1) {\n      return true;\n    }\n\n    // not logged in so redirect to login page with the return url\n    this.router.navigate(['/home'], {queryParams: {returnUrl: state.url}});\n    return false;\n  }\n}\n","import { ConstantesUtil } from './constantes-util';\nimport {Injectable} from '@angular/core';\nimport {Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot} from '@angular/router';\n\nimport {AuthenticationService} from '../services/authentication.service';\n\n@Injectable({providedIn: 'root'})\nexport class AuthGuardAdm implements CanActivate {\n  constructor(\n    private router: Router,\n    private authenticationService: AuthenticationService\n  ) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const currentUser = this.authenticationService.currentUserValue;\n    const perfiles = this.authenticationService.perfiles;\n    if (currentUser && perfiles && perfiles.indexOf(ConstantesUtil.PERFIL_ADMINISTRADOR) !== -1) {\n      return true;\n    }\n\n    // not logged in so redirect to login page with the return url\n    this.router.navigate(['/home'], {queryParams: {returnUrl: state.url}});\n    return false;\n  }\n}\n"]}