{"version":3,"sources":["webpack:///src/app/ajustes/ajustes-routing.module.ts","webpack:///src/app/ajustes/ajustes.module.ts","webpack:///src/app/ajustes/components/perfil/perfil.component.ts","webpack:///src/app/ajustes/components/perfil/perfil.component.html","webpack:///src/app/ajustes/services/usuario.service.ts"],"names":["routes","path","component","canActivate","AjustesRoutingModule","forChild","AjustesModule","PerfilComponent","formBuilder","authenticationService","usuarioService","toastr","usuario","currentUserValue","entidad","perfilForm","group","nombreCompleto","required","primerApellido","segundoApellido","correo","email","celular","contrasena","minLength","confirmarContrasena","validator","controls","invalid","peticion","value","actualizarDatos","subscribe","respuesta","actualizarCurrentUser","success","mensaje","error","onSubmit","UsuarioService","http","url","apiUsuarioUrl","put","pipe","estado","exitoso","Error"],"mappings":"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","file":"ajustes-ajustes-module-es5.js","sourcesContent":["import { AuthGuard } from './../commons/helpers/auth.guard';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {PerfilComponent} from \"./components/perfil/perfil.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: PerfilComponent,\n    canActivate: [AuthGuard]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AjustesRoutingModule { }\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {AjustesRoutingModule} from './ajustes-routing.module';\nimport {PerfilComponent} from './components/perfil/perfil.component';\nimport {CommonsModule} from \"../commons/commons.module\";\nimport {MaterialModule} from \"../material/material.module\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\n\n@NgModule({\n  declarations: [PerfilComponent],\n  imports: [\n    CommonModule,\n    AjustesRoutingModule,\n    CommonsModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule\n  ]\n})\nexport class AjustesModule {\n}\n","import { ToastrService } from 'ngx-toastr';\nimport {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\nimport {MustMatch} from \"../../../commons/validators/must-match.validator\";\nimport {RegistroPeticion} from \"../../../commons/models/registro-peticion.model\";\nimport {AuthenticationService} from \"../../../commons/services/authentication.service\";\nimport {UsuarioService} from \"../../services/usuario.service\";\n\n@Component({\n  selector: 'app-perfil',\n  templateUrl: './perfil.component.html',\n  styleUrls: ['./perfil.component.scss']\n})\nexport class PerfilComponent implements OnInit {\n\n  perfilForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authenticationService: AuthenticationService,\n    private usuarioService: UsuarioService,\n    private toastr: ToastrService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    const usuario = this.authenticationService.currentUserValue.entidad.usuario;\n    this.perfilForm = this.formBuilder.group({\n      nombreCompleto: [usuario.nombreCompleto, Validators.required],\n      primerApellido: [usuario.primerApellido, Validators.required],\n      segundoApellido: [usuario.segundoApellido,Validators.required],\n      correo: [usuario.correo, [Validators.required, Validators.email]],\n      celular: [usuario.celular, [Validators.required]],\n      contrasena: ['', Validators.minLength(6)],\n      confirmarContrasena: ['',]\n    }, {\n      validator: MustMatch('contrasena', 'confirmarContrasena')\n    });\n  }\n\n  get f() {\n    return this.perfilForm.controls;\n  }\n\n  onSubmit() {\n\n    // stop here if form is invalid\n    if (this.perfilForm.invalid) {\n      return;\n    }\n\n    //Definimos peticiÃ³n y consumimos el ws:\n    const peticion = new RegistroPeticion(this.perfilForm.value);\n\n\n    this.usuarioService.actualizarDatos(peticion).subscribe(\n      respuesta => {\n        this.authenticationService.actualizarCurrentUser(this.perfilForm.value);\n        this.toastr.success(respuesta.mensaje);\n      },\n      error => {\n        this.toastr.error(error);\n      }\n    );\n  }\n\n}\n","<app-header-principal></app-header-principal>\n\n<div class=\"example-container\">\n\n  <div class=\"width-100\">\n    <h1>Datos de usuario</h1>\n  </div>\n\n  <br />\n\n  <form [formGroup]=\"perfilForm\" class=\"example-form\" autocomplete=\"off\">\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Nombres</mat-label>\n      <input matInput placeholder=\"Nombres\" formControlName=\"nombreCompleto\" maxlength=\"100\">\n      <mat-error *ngIf=\"f.nombreCompleto.errors?.required\">Nombres es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Primer Apellido</mat-label>\n      <input matInput placeholder=\"Primer Apellido\" formControlName=\"primerApellido\" maxlength=\"50\">\n      <mat-error *ngIf=\"f.primerApellido.errors?.required\">Primer Apellido es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Segundo Apellido</mat-label>\n      <input matInput placeholder=\"Segundo Apellido\" formControlName=\"segundoApellido\" maxlength=\"50\">\n      <mat-error *ngIf=\"f.segundoApellido.errors?.required\">Segundo Apellido es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Celular</mat-label>\n      <input matInput placeholder=\"Celular\" formControlName=\"celular\" maxlength=\"30\">\n      <mat-error *ngIf=\"f.celular.errors?.required\">Celular es un campo requerido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Correo ElectrÃ³nico</mat-label>\n      <input type=\"email\" matInput placeholder=\"Correo ElectrÃ³nico\" formControlName=\"correo\" [readonly]=\"true\">\n      <mat-error *ngIf=\"f.correo.errors?.required\">Correo ElectrÃ³nico es un campo requerido\"</mat-error>\n      <mat-error *ngIf=\"f.correo.errors?.email\">Correo ElectrÃ³nico invÃ¡lido\"</mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>ContraseÃ±a (Opcional)</mat-label>\n      <input matInput placeholder=\"ContraseÃ±a (Opcional)\" formControlName=\"contrasena\" type=\"password\" \n      autocomplete=\"off\" maxlength=\"100\"/>\n      <mat-error *ngIf=\"f.contrasena.errors?.minlength\">La contraseÃ±a debe tener al menos 6 caracteres\n      </mat-error>\n    </mat-form-field>\n\n    <br />\n\n    <mat-form-field appearance=\"fill\" class=\"width-100\">\n      <mat-label>Confirmar ContraseÃ±a (Opcional)</mat-label>\n      <input matInput placeholder=\"Confirmar ContraseÃ±a (Opcional)\" formControlName=\"confirmarContrasena\" type=\"password\" \n      autocomplete=\"off\" maxlength=\"100\"/>\n      <mat-error *ngIf=\"f.confirmarContrasena.errors?.mustMatch\">Las contraseÃ±as deben coincidir</mat-error>\n    </mat-form-field>\n\n    <br /><br />\n\n    <button mat-raised-button class=\"width-100\" (click)=\"onSubmit()\" color=\"primary\">Actualizar Datos</button>\n\n  </form>\n</div>","import {Injectable} from '@angular/core';\nimport {environment} from \"../../../environments/environment\";\nimport {map} from \"rxjs/operators\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Estado} from \"../../commons/models/estado.model\";\nimport {RegistroPeticion} from \"../../commons/models/registro-peticion.model\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsuarioService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  actualizarDatos(peticion: RegistroPeticion) {\n    const url = `${environment.apiUsuarioUrl}/actualizarDatos`;\n    return this.http.put<Estado>(url, peticion)\n      .pipe(map(estado => {\n        //Si arrojo un estado fallido retornamos error\n        if (!estado || estado.exitoso !== true) {\n          throw new Error(estado.mensaje);\n        }\n        return estado;\n      }));\n  }\n}\n"]}